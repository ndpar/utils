package com.ndpar.utils

import org.junit.Test

class SortTest {

    /*
     * Sorting methods for int and long primitive types.
     * int and long sorts are identical.
     */

    @Test
    void insertionSort_smallArray() {
        // array length < 47
        int[] array = [40, 5, 69, 46, 34, 40, 46, 84, 29, 8, 75, 97, 24]
        Arrays.sort(array)
    }

    @Test
    void dualPivotQuicksort_mediumArray() {
        // array length < 286
        int[] array = [
                90, 47, 58, 29, 22, 32, 55,  5, 55, 73, 58, 50, 40,  5, 69, 46, 34,
                40, 46, 84, 29,  8, 75, 97, 24, 40, 21, 82, 77,  9, 63, 92, 51, 92,
                39, 15, 43, 89, 36, 69, 40, 16, 23,  2, 29, 91, 57, 43, 55, 22]
        Arrays.sort(array)
    }

    @Test
    void dualPivotQuicksort_medidumArray_largeCenterPart() {
        // array length < 286
        int[] array = [
                90, 47, 58, 29, 42, 32, 55, 55, 55, 43, 58, 50, 40, 36, 59, 46, 44,
                40, 46, 44, 29, 68, 75, 97, 24, 40, 58, 42, 37, 49, 43, 92, 51, 92,
                39, 15, 43, 39, 36, 69, 40, 16, 23, 42, 39, 91, 57, 43, 55, 22]
        Arrays.sort(array)
    }

    @Test
    void quicksort_mediumArray_equalPivotalElements() {
        // array length < 286
        int[] array = [
                90, 47, 58, 29, 22, 32, 55,  5, 55, 73, 58, 50, 40,  5, 69, 46, 34,
                40, 46, 84, 29,  8, 75, 97, 24, 40, 21, 82, 77,  9, 63, 92, 51, 92,
                39, 15, 43, 89, 40, 69, 40, 16, 23,  2, 29, 91, 57, 43, 55, 22]
        Arrays.sort(array)
    }

    @Test
    void quicksort_bigArray_highlyUnstructured() {
        // array length >= 286
        int[] array = [
                90, 47, 58, 29, 22, 32, 55,  5, 55, 73, 58, 50, 40,  5, 69, 46, 34,
                40, 46, 84, 29,  8, 75, 97, 24, 40, 21, 82, 77,  9, 63, 92, 51, 92,
                39, 15, 43, 89, 36, 69, 40, 16, 23,  2, 29, 91, 57, 43, 55, 22, 89,
                65, 84, 30, 49, 30, 60, 87, 69, 28, 31, 81,  7, 42, 23, 45, 95, 20,
                23, 87, 25, 62, 63, 76, 45, 83, 60, 97, 75, 88, 89, 84, 84, 90, 93,
                78, 31, 24, 91, 99, 27, 52, 25, 87, 67, 97, 11, 95, 85, 78, 53, 90,
                11, 54,  4, 81, 96, 54, 72, 88, 88, 27, 96, 52, 75, 26, 32, 83, 91,
                41, 11,  6, 52, 21, 99, 64,  7, 40, 34, 86, 22, 47,  6, 21, 77,  7,
                91, 93, 17, 97, 58, 51, 16, 75, 42, 40, 10, 30, 86, 69, 26, 87, 56,
                70,  0, 71,  1, 48, 43, 50, 59, 12, 74, 85, 21,  6, 67, 55, 61,  0,
                47, 63, 71, 74, 34, 67, 69, 38, 96, 76, 92, 15, 22, 58, 10, 54,  4,
                94, 88, 88, 26,  4, 74,  9, 18, 11, 37, 15,  6, 93, 34, 97, 89, 41,
                79, 47,  0, 49, 47, 44, 53, 96,  3, 78, 25, 62, 19, 69, 19, 79, 15,
                41, 95, 77, 13, 19, 87, 20,  0, 52, 90, 88, 61,  9, 11, 46, 31, 50,
                 8,  8, 87, 50, 69, 65, 24, 66, 64, 84, 73, 20, 21, 15, 38, 28, 18,
                77, 48, 42, 98, 64, 62, 14, 20, 34,  6, 78, 51, 20, 88, 46, 99,  1,
                14,  2, 81, 23, 46,  5, 22, 47, 88, 50, 54, 70, 82, 49, 36,  0, 66]
        Arrays.sort(array)
    }

    @Test
    void mergesort_bigArray_manySortedChunks() {
        // array length >= 286
        int[] array = [
                12, 20, 45, 88, 98, 10, 13, 24, 41, 46, 13, 58, 68, 81, 89,  8, 22,
                48, 64, 98, 87, 72, 62, 57, 10, 14, 32, 38, 39, 42, 15, 25, 34, 37,
                57, 94, 62, 61, 27, 15, 68, 43, 39, 31,  2, 41, 65, 68, 77, 83, 68,
                69, 75, 84, 94, 16, 64, 64, 84, 92, 97, 50, 45, 43, 24, 79, 75, 57,
                12,  9, 82, 78, 19, 13,  5,  4, 39, 49, 67, 80, 18, 36, 44, 52, 86,
                99, 98, 38, 17, 14, 70, 59, 47, 14, 13, 91, 82, 71, 40, 26,  5, 49,
                51, 52, 95, 42, 54, 56, 70, 84, 22, 33, 43, 47, 88,  1, 20, 30, 71,
                93, 24, 28, 28, 35, 75, 18, 26, 30, 69, 91, 62, 58, 45, 15,  3,  4,
                54, 66, 72, 96, 79,  7,  5,  5,  1, 49, 46, 27, 10,  0, 98, 84, 83,
                56, 32,  2,  4, 34, 48, 81, 16, 24, 60, 76, 77, 98, 72, 58, 55,  1,
                69, 54, 45, 33, 14, 10, 36, 62, 90, 99, 97, 84,  7,  3,  1, 71, 66,
                58, 58, 53, 16, 18, 21, 73, 95, 89, 53, 46, 33, 21, 16, 26, 34, 36,
                93, 71, 42, 31, 15,  7, 92, 55, 33, 29,  0, 87, 41, 38, 34, 17, 89,
                87, 84, 73, 69,  0, 18, 50, 69, 99, 95, 81, 52, 48, 44,  1, 15, 30,
                56, 67, 91, 61, 45, 44, 40,  6, 77, 78, 85, 94,  3, 21, 44, 48, 68,
                28, 46, 54, 84, 87, 27, 32, 40, 84, 99, 99, 75, 22, 20,  7, 92, 89,
                71, 39, 39, 90, 83, 65, 63, 51, 95, 93, 61, 53,  3, 16, 67, 76, 88]
        Arrays.sort(array)
    }
}
